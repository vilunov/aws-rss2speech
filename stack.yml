AWSTemplateFormatVersion: 2010-09-09

Parameters:
  TelegramToken:
    Description: 'Token for Telegram Bot API as received from the BotFather'
    Type: String
    NoEcho: true
  AdminTelegramUsername:
    Description: "Username of the bot's administrator on Telegram"
    Type: String
  AllocatedStorageDB:
    Description: 'Storage allocated for the settings database'
    Type: String
    Default: '20'
  FeedUpdateSchedule:
    Description: 'Schedule of updating the feeds'
    Type: String
    Default: 'cron(0/5 * * * ? *)'
  S3SetupStorage:
    Description: 'Bucket with files for starting up the stack, must have file /lambda.zip'
    Type: String
  InstanceKeyName:
    Description: 'Name of your key for connecting to bot instance via SSH'
    Type: String

Resources:
  # Storages and communication mediums
  FeedUpdatesQueue:
    Type: 'AWS::SQS::Queue'
    Properties: {}
  AudioStorage:
    Type: 'AWS::S3::Bucket'
    Properties: {}
  SettingsDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: postgres
      EngineVersion: '10.5'
      DBInstanceClass: db.t2.micro
      DBName: 'rss2tg'
      MasterUsername: 'rss2tg'
      MasterUserPassword: 'rss2tg1234'
      AllocatedStorage: !Ref AllocatedStorageDB
      BackupRetentionPeriod: 0d

  # Access policies
  AudioStoragePolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AudioStorage
      PolicyDocument:
        Statement:
          Action:
          - 's3:*'
          Effect: Allow
          Resource: !GetAtt AudioStorage.Arn
          Principal: '*'
    DependsOn:
    - AudioStorage
  FeedUpdaterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action: "s3:*"
              Resource: !GetAtt AudioStorage.Arn
            - Effect: Allow
              Action: "sqs:SendMessage"
              Resource: !GetAtt FeedUpdatesQueue.Arn
    DependsOn:
    - AudioStorage
    - FeedUpdatesQueue

  # Computing services
  BotInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0ff8a91507f77f867'
      KeyName: !Ref InstanceKeyName
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          /opt/aws/bin/cfn-init -s ${AWS::StackName} -r BotInstance --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              python36: []
          files:
            '/root/.aws/config':
              content:
                Fn::Join:
                - ''
                - - '[default]\n'
                  - 'region = '
                  - !Ref AWS::Region
                  - '\n'
              mode: '000777'
              owner: root
              group: root
          sources:
            /opt/rss2tg/ : "https://github.com/vilunov/aws-rss2speech/tarball/master"
          commands:
            0001_requirements:
              command: "pip-3.6 install -r bot/requirements.txt"
              cwd: "/opt/rss2tg/"
            0002_init:
              command: "python3.6 bot/init_db.py"
              cwd: "/opt/rss2tg/"
              env:
                DB_HOSTNAME: !GetAtt SettingsDB.Endpoint.Address
                DB_HOSTPORT: !GetAtt SettingsDB.Endpoint.Port
            0003_bot:
              command: "python3.6 bot/bot.py"
              cwd: "/opt/rss2tg/"
              env:
                AWS_BUCKET: !Ref AudioStorage
                AWS_SQS_QUEUE_URL: !Ref FeedUpdatesQueue
                DB_HOSTNAME: !GetAtt SettingsDB.Endpoint.Address
                DB_HOSTPORT: !GetAtt SettingsDB.Endpoint.Port

  FeedUpdater:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3SetupStorage
        S3Key: 'lambda.zip'
      Handler: service.handler
      Runtime: python3.6
      Role: !GetAtt FeedUpdaterRole.Arn
      Environment:
        Variables:
          AWS_BUCKET: !Ref AudioStorage
          AWS_SQS_QUEUE_URL: !Ref FeedUpdatesQueue
          DB_HOSTNAME: !GetAtt SettingsDB.Endpoint.Address
          DB_HOSTPORT: !GetAtt SettingsDB.Endpoint.Port
      Timeout: 120
    DependsOn:
    - FeedUpdaterRole
    - AudioStorage
    - FeedUpdatesQueue

  FeedUpdaterTriggerer:
    Type: "AWS::Events::Rule"
    Properties:
      Description: 'Schedule rule for triggering the update of feeds'
      ScheduleExpression: !Ref FeedUpdateSchedule
      Targets:
      - Arn: !GetAtt FeedUpdater.Arn
        Id: TriggerFeedUpdater
    DependsOn:
    - FeedUpdater
