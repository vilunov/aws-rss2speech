AWSTemplateFormatVersion: 2010-09-09

Parameters:
  TelegramToken:
    Description: 'Token for Telegram Bot API as received from the BotFather'
    Type: String
    NoEcho: true
  AdminTelegramUsername:
    Description: "Username of the bot's administrator on Telegram"
    Type: String
  AllocatedStorageDB:
    Description: 'Storage allocated for the settings database'
    Type: String
    Default: '20'

Resources:
  # Storages and communication mediums
  FeedUpdatesQueue:
    Type: 'AWS::SQS::Queue'
    Properties: {}
  AudioStorage:
    Type: 'AWS::S3::Bucket'
    Properties: {}
  SettingsDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: postgres
      EngineVersion: '10.5'
      DBInstanceClass: db.t2.micro
      DBName: 'rss2tg'
      MasterUsername: 'rss2tg'
      MasterUserPassword: 'rss2tg1234'
      AllocatedStorage: !Ref AllocatedStorageDB

  # Access policies
  AudioStoragePolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AudioStorage
      PolicyDocument:
        Statement:
          Action:
          - 's3:*'
          Effect: Allow
          Resource: !GetAtt AudioStorage.Arn
          Principal: '*'
    DependsOn:
    - AudioStorage
  FeedUpdaterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action: "s3:*"
              Resource: !GetAtt AudioStorage.Arn
            - Effect: Allow
              Action: "sqs:SendMessage"
              Resource: !GetAtt FeedUpdatesQueue.Arn
    DependsOn:
    - AudioStorage
    - FeedUpdatesQueue

  # Computing services
  BotInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      Environment:
        Variables:
          TG_TOKEN: !Ref TelegramToken
          TG_ADMIN: !Ref AdminTelegramUsername
    DependsOn:
    - AudioStorage
    - FeedUpdatesQueue
    - SettingsDB
    Metadata:
      AWS::CloudFormation::Init:
        sources:
          ~/project/ : "https://github.com/vilunov/aws-rss2speech/tarball/master"
        commands:
          init_db:
            command: "python bot/init_db.py"
            cwd: "~/project"
            env:
              DB_HOSTNAME: !GetAtt SettingsDB.Endpoint.Address
              DB_HOSTPORT: !GetAtt SettingsDB.Endpoint.Port
          deploy_bot:
            command: "python bot/bot.py"
            cwd: "~/project"
            env:
              AWS_BUCKET: !Ref AudioStorage
              AWS_SQS_QUEUE_URL: !Ref FeedUpdatesQueue
              DB_HOSTNAME: !GetAtt SettingsDB.Endpoint.Address
              DB_HOSTPORT: !GetAtt SettingsDB.Endpoint.Port

  FeedUpdater:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: lambda.zip
      Handler: index.lambda.handler
      Runtime: python3.6
      Role: !Ref FeedUpdaterRole
      Environment:
        Variables:
          AWS_BUCKET: !Ref AudioStorage
          AWS_SQS_QUEUE_URL: !Ref FeedUpdatesQueue
          DB_HOSTNAME: !GetAtt SettingsDB.Endpoint.Address
          DB_HOSTPORT: !GetAtt SettingsDB.Endpoint.Port
    DependsOn:
    - FeedUpdaterRole
    - BotInstance
    - AudioStorage
    - FeedUpdatesQueue
    - SettingsDB
